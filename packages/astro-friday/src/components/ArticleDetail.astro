---
import type { CollectionEntry } from '../types/content'
import config from 'virtual:astro-friday-config'
import { formatDate } from '../utils/date'
import ArticleLangs from './ArticleLangs.astro'

interface Props {
  entry: CollectionEntry
}

const { entry } = Astro.props

const fKeys = config.post.frontmatterKeys

---

<div class="mx-auto mb-8 prose space-y-2.5! dark:prose-invert">
  {
    config.viewTransition.enable
      ? <h1 transition:name={`post:${entry.id}`}>{entry.data[fKeys.title]}</h1>
      : <h1>{entry.data[fKeys.title]}</h1>
  }

  <p class="op-50">
    <span class="text-sm ws-nowrap">
      { formatDate(entry.data[fKeys.modified] || entry.data[fKeys.created], false) }
    </span>

    <span class="tag-zinc700">{entry.collection}</span>
  </p>

  {
    config.post.export.md
      ? <button class="btn-export-to-md btn-blue">Export MD</button>
      : null
  }

  {
    Object.keys(entry.data[fKeys.langs]).length > 0 && (
      <div class="flex items-center">
        <i class="i-lucide:languages mr-2 op-50"></i>
        <ArticleLangs {entry} class="[&_a]:text-sm!" highlightCurrent />
      </div>
    )
  }


  {
    entry.data[fKeys.subtitle] && (
      <p class="op-50 italic">{entry.data[fKeys.subtitle]}</p>
    )
  }

  {
    entry.data[fKeys.draft] && (
      <p class="text-orange-400 px-4 py-2 border-(l-3px orange-400) bg-orange-400:10">
        This is a draft post, the content may be incomplete. Please check back later.
      </p>
    )
  }
</div>

<article class="component-article-detail__article displaying-table-of-contents mx-auto prose dark:prose-invert">
  <slot />
</article>

<script is:inline type="module" define:vars={{ entry, config }}>
import { withViewTransition } from 'https://esm.sh/astro-view-transition-script@latest'
import rehypeParse from 'https://esm.sh/rehype-parse@9?bundle'
import rehypeRemark from 'https://esm.sh/rehype-remark@10?bundle'
import remarkGfm from 'https://esm.sh/remark-gfm@4?bundle'
import remarkStringify from 'https://esm.sh/remark-stringify@11?bundle'
import { unified } from 'https://esm.sh/unified@11?bundle'
import { stringify } from 'https://esm.sh/yaml@2?bundle&exports=stringify'

function task(state) {
  const md = config.post.export.md

  if (md) {
    const article = state.document.querySelector('.component-article-detail__article')
    if (!article)
      return

    const btnExport2Md = state.document.querySelector('.btn-export-to-md')
    btnExport2Md.addEventListener('click', async () => {
      const html = article.innerHTML

      const file = await unified()
        .use(rehypeParse, md.rehypeParse)
        .use(rehypeRemark, md.rehypeRemark)
        .use(remarkGfm, md.remarkGfm)
        .use(remarkStringify, md.remarkStringify)
        .process(html)

      const frontmatter = stringify(entry.data)

      const blob = new Blob([`---\n${frontmatter}---\n\n${file.toString()}`], { type: 'text/markdown' })
      const url = URL.createObjectURL(blob)
      const a = state.document.createElement('a')
      a.href = url
      a.download = `${entry.id}.md`
      state.document.body.appendChild(a)
      a.click()
      state.document.body.removeChild(a)
      URL.revokeObjectURL(url)
    })
  }
}

withViewTransition({
  initial: task,
  done: task,
})
</script>
